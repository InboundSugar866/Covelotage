/** IMPORTS */

/**
 * USE "import" :
 * - package.json => "type" : "module"
 * - server.js => import express from 'express'
 * 
 * Else : 
 * - server.js => const express = require('express')
*/

import express from 'express';
//const express = require('express');

/**
 * Allow adding the appropriate CORS headers to all server responses. 
 * By default, CORS allows all origins to access server resources.
 */
import cors from 'cors';
//const cors = require('cors');

/**
 * Logging tool used with Express.js to record information about 
 * incoming HTTP requests and the responses generated by the server
 */
import morgan from 'morgan';
//const morgan = require('morgan');

/** Connection to the database */
import connect from './database/conn.js';
//const connect = require('./database/conn.js');

import router from './router/route.js'
//const router = require('./router/route.js');

const app = express();

/** MIDDLEWARES */

// Increased json data limit for profile images 
app.use(express.json({ limit: '5mb' }));
app.use(cors());
app.use(morgan('tiny'));
app.disable('x-powered-by') // less hackers know about ou stack

const port = 8080;

/** HTTP GET Request */
app.get('/', (req, res) => {
    res.status(201).json("Home GET Request");
});

/** API routes */
app.use('/api', router);




/** start server only whan we have valid connection*/
/*connect().then(() => {
    try {
        app.listen(port, () => {
            console.log(`Server connected tp http://localhost:${port}`);
        });
    } catch (error) {
        console.log('Cannot connect to the server')
    }
}).catch(error => {
    console.log("Invalid database connection...!")
});
*/

const server = app.listen(8080);
connect().then(() => {
  //const server = app.listen(port);
  server.on('error', (error) => {
      if (error.code === 'EADDRINUSE') {
          console.log(`Port ${port} is already in use.`);
      } else {
          console.log('Cannot connect to the server:', error);
      }
  });
  server.on('listening', () => {
      console.log(`Server connected to http://localhost:${port}`);
  });
}).catch(error => {
  console.log("Invalid database connection...!")
});





//const express = require('express');
import mongoose from 'mongoose';
//const mongoose = require('mongoose');
import cookieParser from 'cookie-parser';
//const cookieParser = require('cookie-parser');
import dotenv from 'dotenv';
//const dotenv = require('dotenv');
import jwt from 'jsonwebtoken';
//const jwt = require('jsonwebtoken');
//const cors = require('cors');
import bcrypt from 'bcryptjs';
//const bcrypt = require('bcryptjs');
import User from './model/User.model.js';
//const User = require('./models/User');
import Message from './model/Message.model.js';
//const Message = require('./models/Message');
import ws from 'ws';
//const ws = require('ws');
import fs from 'fs';
//const fs = require('fs');

dotenv.config();
/*
mongoose.connect(process.env.MONGO_URL, (err) => {
  if (err) throw err;
});
*/

import ENV from './config.js'
mongoose.connect(ENV.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Database connected!'))
  .catch(err => console.log(err));

const jwtSecret = process.env.JWT_SECRET;
const bcryptSalt = bcrypt.genSaltSync(10);


import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
//const app = express();
app.use('/uploads', express.static(__dirname + '/uploads'));
app.use(express.json());
app.use(cookieParser());
app.use(cors({
  credentials: true,
  origin: process.env.CLIENT_URL,
}));

async function getUserDataFromRequest(req) {
  return new Promise((resolve, reject) => {
    const token = req.cookies?.token;
    if (token) {
      jwt.verify(token, jwtSecret, {}, (err, userData) => {
        if (err) throw err;
        resolve(userData);
      });
    } else {
      reject('no token');
    }
  });

}

app.get('/test', (req,res) => {
  res.json('test ok');
});

app.get('/messages/:userId', async (req,res) => {
  const {userId} = req.params;
  const userData = await getUserDataFromRequest(req);
  const ourUserId = userData.userId;
  const messages = await Message.find({
    sender:{$in:[userId,ourUserId]},
    recipient:{$in:[userId,ourUserId]},
  }).sort({createdAt: 1});
  res.json(messages);
});

app.get('/people', async (req,res) => {
  const users = await User.find({}, {'_id':1,username:1});
  res.json(users);
});

app.get('/profile', (req,res) => {
  const token = req.cookies?.token;
  if (token) {
    jwt.verify(token, jwtSecret, {}, (err, userData) => {
      if (err) throw err;
      res.json(userData);
    });
  } else {
    res.status(401).json('no token');
  }
});

app.post('/login', async (req,res) => {
  const {username, password} = req.body;
  const foundUser = await User.findOne({username});
  if (foundUser) {
    const passOk = bcrypt.compareSync(password, foundUser.password);
    if (passOk) {
      jwt.sign({userId:foundUser._id,username}, jwtSecret, {}, (err, token) => {
        res.cookie('token', token, {sameSite:'none', secure:true}).json({
          id: foundUser._id,
        });
      });
    }
  }
});

app.post('/logout', (req,res) => {
  res.cookie('token', '', {sameSite:'none', secure:true}).json('ok');
});

app.post('/register', async (req,res) => {
  const {username,password} = req.body;
  try {
    const hashedPassword = bcrypt.hashSync(password, bcryptSalt);
    const createdUser = await User.create({
      username:username,
      password:hashedPassword,
    });
    jwt.sign({userId:createdUser._id,username}, jwtSecret, {}, (err, token) => {
      if (err) throw err;
      res.cookie('token', token, {sameSite:'none', secure:true}).status(201).json({
        id: createdUser._id,
      });
    });
  } catch(err) {
    if (err) throw err;
    res.status(500).json('error');
  }
});

//const server = app.listen(8080);

//const wss = new ws.Server({server});
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const WebSocket = require('ws');
const wss = new WebSocket.Server({ noServer: true });

//const wss = new ws.Server({ noServer: true });

server.on('upgrade', function upgrade(request, socket, head) {
  wss.handleUpgrade(request, socket, head, function done(ws) {
    wss.emit('connection', ws, request);
  });
});
wss.on('connection', (connection, req) => {

  function notifyAboutOnlinePeople() {
    [...wss.clients].forEach(client => {
      client.send(JSON.stringify({
        online: [...wss.clients].map(c => ({userId:c.userId,username:c.username})),
      }));
    });
  }

  connection.isAlive = true;

  connection.timer = setInterval(() => {
    connection.ping();
    connection.deathTimer = setTimeout(() => {
      connection.isAlive = false;
      clearInterval(connection.timer);
      connection.terminate();
      notifyAboutOnlinePeople();
      console.log('dead');
    }, 1000);
  }, 5000);

  connection.on('pong', () => {
    clearTimeout(connection.deathTimer);
  });

  // read username and id form the cookie for this connection
  const cookies = req.headers.cookie;
  if (cookies) {
    const tokenCookieString = cookies.split(';').find(str => str.startsWith('token='));
    if (tokenCookieString) {
      const token = tokenCookieString.split('=')[1];
      if (token) {
        jwt.verify(token, jwtSecret, {}, (err, userData) => {
          if (err) throw err;
          const {userId, username} = userData;
          connection.userId = userId;
          connection.username = username;
        });
      }
    }
  }

  connection.on('message', async (message) => {
    const messageData = JSON.parse(message.toString());
    const {recipient, text, file} = messageData;
    let filename = null;
    if (file) {
      console.log('size', file.data.length);
      const parts = file.name.split('.');
      const ext = parts[parts.length - 1];
      filename = Date.now() + '.'+ext;
      const path = __dirname + '/uploads/' + filename;
      const bufferData = new Buffer(file.data.split(',')[1], 'base64');
      fs.writeFile(path, bufferData, () => {
        console.log('file saved:'+path);
      });
    }
    if (recipient && (text || file)) {
      const messageDoc = await Message.create({
        sender:connection.userId,
        recipient,
        text,
        file: file ? filename : null,
      });
      console.log('created message');
      [...wss.clients]
        .filter(c => c.userId === recipient)
        .forEach(c => c.send(JSON.stringify({
          text,
          sender:connection.userId,
          recipient,
          file: file ? filename : null,
          _id:messageDoc._id,
        })));
    }
  });

  // notify everyone about online people (when someone connects)
  notifyAboutOnlinePeople();
});